# !/usr/bin/env python3
#会去环境设置寻找python3的目录
# -*- coding: utf-8 -*-

import tensorflow as tf
import numpy as np

def add_layer(inputs, in_size, out_size, activation_function=None):
    #inputs是输入数据
    Weight = tf.Variable(tf.random_normal([in_size, out_size])) 
    #有in_size行，out_size列
    
    biases = tf.Variable(tf.zeros([1, out_size]) + 0.1) 
    ##biase是一个类似于列表，一行，out_size列，初始值为0+0.1

    # biases not 0 is good
    Wx_plus_b = tf.matmul(inputs, Weight) + biases
    #Wx_plus_b是该层输出的未激活的值
    #matmul是矩阵乘
    # if activation function is None or not:
    if activation_function is None:
        outputs = Wx_plus_b
    else:
        outputs = activation_function(Wx_plus_b)
    return outputs


# Create data: [-1, 1] steps: 300 newaxis: weidu--have 300 examples.
x_data = np.linspace(-1, 1, 300, dtype=np.float32)[:, np.newaxis]
noise = np.random.normal(0, 0.05, x_data.shape).astype(np.float32)

y_data = np.square(x_data) - 0.5 + noise

# 利用占位符定义我们所需的神经网络的输入
xs = tf.placeholder(tf.float32, [None, 1])
#1表示只有一个特征值
ys = tf.placeholder(tf.float32, [None, 1])

# 输出层和输入层的结构是一样的；隐藏层我们可以自己假设
layer1 = add_layer(xs, 1, 10, activation_function=tf.nn.relu) 
#relu函数是y=x函数，x的取值范围在[0,1]
# Hidden layer  10个神经元

prediction = add_layer(layer1, 10, 1, activation_function=None) 
#定义输出层，此时的输入就是隐藏层的输入layer1，layer1是隐藏层，输入有10层（隐含层的输入层），输出是1
# Output layer

# 计算预测值prediction和真实值的误差，对二者差的平方求和再取平均
loss = tf.reduce_mean(tf.reduce_sum(tf.square(ys - prediction), reduction_indices=[1]))

train_step = tf.train.GradientDescentOptimizer(0.1).minimize(loss)
#代表以0.1的效率来最小化误差loss

# init = tf.initialize_all_variables() 激活变量
init = tf.global_variables_initializer()

### Session Start ###
sess = tf.Session()
sess.run(init)
#真正激活变量

# 当运算要用到placeholder时，就需要feed_dict这个字典来指定输入
for i in range(1000):
    # training
    sess.run(train_step, feed_dict={xs: x_data, ys: y_data})
    #内容是train_step
    if 0 == i % 50:
        #50也可以换成20，每50步输出一下误差，观察训练过程中的权重变化情况
        print(sess.run(loss, feed_dict={xs: x_data, ys:y_data}))
        #输出的值是误差，误差逐渐变小，机器学习起了作用
        # to visualize the result and improvement
        
sess.close()

#可视化
import matplotlib.pyplot as plt
# plot the real data
fig = plt.figure()
ax = fig.add_subplot(1,1,1)
ax.scatter(x_data, y_data)
plt.ion()#本次运行请注释，全局运行不要注释
plt.show()

